version: 2.1
aliases:
  - &aws-cli-image
    - image: amazon/aws-cli
  - &ansible-image
    - image: python:3.11-rc-alpine
  - &node-base-image
    - image: circleci/node:13.8.0

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install Nodejs 13
    steps:
      - run:
          name: Install Nodejs 13
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run: 
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              echo "Reverting migration..."
              cd ~/project/backend
              npm install 
              npm run migrations:revert
            else
              echo "Not reverting migration: it was unsuccessful before"
            fi

orbs:
  slack: circleci/slack@4.1

jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Build
          command: |
            echo $Uda_env_var
            
  build-frontend:
    docker: *node-base-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker: *node-base-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            npm audit fix --force --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker: *node-base-image
    steps:
      - checkout
      - restore_cache:
          keys: [testfrontend-build]
      - run:
          name: Build test-front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker: *node-base-image
    steps:
      - checkout
      - restore_cache:
          keys: [testbacktend-build]
      - run:
          name: Build test-back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker: *node-base-image
    steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-build]
      - run:
          name: Build scan-front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker: *node-base-image
    steps:
      - checkout
      - restore_cache:
          keys: [scanbacktend-build]
      - run:
          name: Build scan-back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*New commit is comming*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker: *aws-cli-image
    steps:
      - checkout
      - run:
          name: Install tar and gzip library
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:
          name: "Echo EC2 instances"
          command: |
            echo "IP address:"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  configure-infrastructure:
    docker: *ansible-image
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["e3:13:d7:86:83:cb:b4:e3:5f:da:56:9e:ef:96:3d:05"]
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo "IP address:"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker: *node-base-image
    steps:
      - checkout
      - run:
          name: Create environment varibales
          command: |
            echo -e "NODE_ENV=local\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - run:
          name: Install aws-cli for destroy_environment step.
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            echo "AWS CLI version"
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cat backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "insecure" >> ~/.curlrc
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker: *node-base-image
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl unzip
      - run:
          name: Install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          # `npm run build` one last time so that the backend url gets "baked" into the front-end.
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations 

  deploy-backend:
    docker: *ansible-image
    steps:
      - checkout 
      # - install_awscli
      - add_ssh_keys:
          fingerprints:
            - "e3:13:d7:86:83:cb:b4:e3:5f:da:56:9e:ef:96:3d:05"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible
            apk add --no-cache tar npm gzip curl gcompat
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            rm -rf /var/cache/apk/*
            echo "Test aws cli version"
            aws --version
            which aws
      - run:
          name: Build backend
          command: |
            sed 's/local/production/g' ~/project/backend/.env
            cd backend
            npm install
            echo "--- Backend variables ---"
            cat ~/project/backend/.env
            npm run build
      - run:
          name: Create backend artifact
          command: |
            tar czf backend-artifact.tar.gz backend
      - run:
          name: Deploy backend
          command: |
            echo "Contents of the inventory.txt file is:"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker: *node-base-image
    steps:
      - checkout
      - run:
          name: Install dependencies
          # Curl for backend/frontend testing API
          # aws-cli for clean up.
          command: |
            sudo apt install -y tar gzip curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install node modules
          command: |
            cd backend
            npm install
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            echo " --- Cat inventory file --- "
            cat ~/project/.circleci/ansible/inventory.txt | sed 1d
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            
            if [ "$(curl -sL -w '%{http_code}' ${API_URL}/api/status -o /dev/null)" = "200" ];
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          # Change return status to 0 after the job fails.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if [ "$(curl -sL -w '%{http_code}' ${URL} -o /dev/null)" = "200" ];
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations 

workflows:
  send-notification:
    jobs:
      - notify:
          context: slack-secrets
  build: 
    jobs:
      - build:
          context:
            - udapeopleContext
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
