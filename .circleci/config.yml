version: 2.1
orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
  
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Build
          command: |
            echo $Uda_env_var

  build-frontend:
    environment: 
      code: front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # My code
            cd frontend
            echo $code
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    environment: 
      code: back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    environment: 
      code: test-front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [testfrontend-build]
      - run:
          name: Build test-front-end
          command: |
            # My code
            cd frontend
            echo $code
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: testfrontend-build
      - notify_on_failure
                
  test-backend:
    environment: 
      code: test-back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [testbacktend-build]
      - run:
          name: Build test-back-end
          command: |
            # My code
            cd backend
            echo $code
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: testbacktend-build
      - notify_on_failure

  scan-frontend:
    environment: 
      code: scan-front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-build]
      - run:
          name: Build scan-front-end
          command: |
            # My code
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-build
      - notify_on_failure

  scan-backend:
    environment: 
      code: scan-back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanbacktend-build]
      - run:
          name: Build scan-back-end
          command: |
            # My code
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scanbacktend-build
      - notify_on_failure

  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - slack/notify:
  #         custom: |
  #           {
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "plain_text",
  #                     "text": "*New commit is comming*",
  #                     "emoji": true
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #         event: always
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1
  #     - slack/notify:
  #         event: pass
  #         template: success_tagged_deploy_1

  deploy-infrastructure:
    environment: 
      id: udapeople-shika1j287dhjppmz437
      backendId: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [deploy-infrastructure-build]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  notify_on_success:
    docker:
      - image: cimg/base
    steps:
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: success_tagged_deployment_1

workflows:
  # send-notification:
  #   jobs:
  #     - notify:
  #         context: slack-secrets
  build: 
    jobs:
      - build:
          context:
            - udapeopleContext
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success: 
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]