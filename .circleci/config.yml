version: 2.1
commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible v2
    steps:
      - run:
          name: Install Ansible v2
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install Nodejs 13
    steps:
      - run:
          name: Install Nodejs 13
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run: 
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure http://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              echo "Reverting migration..."
              cd ~/project/backend
              npm install 
              npm run migration:revert
            else
              echo "Not reverting migration: it was unsuccessful before"
            fi

orbs:
  slack: circleci/slack@4.1

jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Build
          command: |
            echo $Uda_env_var
            
  build-frontend:
    environment: 
      code: front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # My code
            cd frontend
            echo $code
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    environment: 
      code: back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    environment: 
      code: test-front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [testfrontend-build]
      - run:
          name: Build test-front-end
          command: |
            # My code
            cd frontend
            echo $code
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: testfrontend-build
                
  test-backend:
    environment: 
      code: test-back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [testbacktend-build]
      - run:
          name: Build test-back-end
          command: |
            # My code
            cd backend
            echo $code
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: testbacktend-build

  scan-frontend:
    environment: 
      code: scan-front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-build]
      - run:
          name: Build scan-front-end
          command: |
            # My code
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-build

  scan-backend:
    environment: 
      code: scan-back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanbacktend-build]
      - run:
          name: Build scan-back-end
          command: |
            # My code
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scanbacktend-build

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*New commit is comming*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [deploy-infrastructure-build]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout 
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["fb:df:23:66:3a:e7:49:78:53:4e:01:17:0a:03:f5:83"]
      - attach_workspace: 
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install 
            npm run migrations > migrations_dump.txt 
      - run:
          # It seems like memstash.io is no longer available/accessible (?)
          name: Report migration results
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migration succeeded for ${CIRCLE_WORKFLOW_ID:0:7}"
              echo "1" >> ~/project/backend/migration-results.txt
            else
              echo "Migration failed for ${CIRCLE_WORKFLOW_ID:0:7}:"
              cat ~/project/backend/migrations_dump.txt
              echo "fail" >> ~/project/backend/migration-results.txt
              echo "Migration failed for ${CIRCLE_WORKFLOW_ID:0:7}"
            fi
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend/migration-results.txt
      - destroy-environment
      - revert-migrations

workflows:
  send-notification:
    jobs:
      - notify:
          context: slack-secrets
  build: 
    jobs:
      - build:
          context:
            - udapeopleContext
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
