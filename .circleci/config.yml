version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@2.0.6
  node: circleci/node@5.0.0

commands:
  destroy-environment:
    parameters:
      when:
        type: string
      id:
        type: string
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.id >>"
            # aws s3 rm "s3://udapeople-<< parameters.id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    steps:
      - run: 
          name: Revert migrations
          when: on_fail
          command: |
            echo 
            # SUCCESS=$(tail ~/migration-results.txt)
            if (( $SUCCESS == 1 ));
            then
              echo "Reverting migration..."
              cd ~/backend
              npm install 
              npm run migration:revert
            else
              echo "Not reverting migration: it was unsuccessful before"
            fi

jobs:
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Build
          command: |
            echo $Uda_env_var

  build-frontend:
    environment: 
      code: front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # My code
            cd frontend
            echo $code
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    environment: 
      code: back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    environment: 
      code: test-front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [testfrontend-build]
      - run:
          name: Build test-front-end
          command: |
            # My code
            cd frontend
            echo $code
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: testfrontend-build
                
  test-backend:
    environment: 
      code: test-back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [testbacktend-build]
      - run:
          name: Build test-back-end
          command: |
            # My code
            cd backend
            echo $code
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: testbacktend-build

  scan-frontend:
    environment: 
      code: scan-front-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-build]
      - run:
          name: Build scan-front-end
          command: |
            # My code
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-build

  scan-backend:
    environment: 
      code: scan-back-end-build
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanbacktend-build]
      - run:
          name: Build scan-back-end
          command: |
            # My code
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scanbacktend-build

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*New commit is comming*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    environment: 
      id: udapeople-shika87dhjppmz437
      backendId: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [deploy-infrastructure-build]

      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          # root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["fb:df:23:66:3a:e7:49:78:53:4e:01:17:0a:03:f5:83"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure   

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:16.13.1
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "6zQXbSygNbEfouWVyiP6wk" in your local terminal first
                curl https://kvdb.io/6zQXbSygNbEfouWVyiP6wk/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/node:16.13.1
    resource_class: medium
    steps:
      - checkout
      - run: 
          name: Add tar, gzip utilities for workspace retrieval
          command: sudo apt install -y tar gzip 
      - attach_workspace: 
          at: ~/
      - aws-cli/setup
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo $API_URL >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-shika87dhjppmz437 --recursive 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations
                    
workflows:
  send-notification:
    jobs:
      - notify:
          context: slack-secrets
  build: 
    jobs:
      - build:
          context:
            - udapeopleContext
  default:
    jobs:
      - configure-infrastructure
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - deploy-frontend:
          requires: [run-migrations]
      # - build-frontend
      # - build-backend
      - run-migrations:
          requires: [configure-infrastructure]
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]

